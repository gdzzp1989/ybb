1.Maven常用插件：

 指定JDK版本
	  <plugin>
	    <groupId>org.apache.maven.plugins</groupId>
	    <artifactId>maven-compiler-plugin</artifactId>
	    <version>3.6.0</version>
	    <configuration>
		<source>1.8</source>
		<target>1.8</target>
	    </configuration>
	</plugin>

 用于复制依赖的jar包到指定的文件夹里
	<plugin>
	    <groupId>org.apache.maven.plugins</groupId>
	    <artifactId>maven-dependency-plugin</artifactId>
	    <version>2.10</version>
	    <executions>
		<execution>
		    <id>copy-dependencies</id>
		    <phase>package</phase>
		    <goals>
			<goal>copy-dependencies</goal>
		    </goals>
		    <configuration>
			<outputDirectory>${project.build.directory}/lib</outputDirectory>
		    </configuration>
		</execution>
	    </executions>
	</plugin>

 打成jar时，设定manifest的参数，比如指定运行的Main class，还有依赖的jar包，加入classpath中
	<plugin>
	    <groupId>org.apache.maven.plugins</groupId>
	    <artifactId>maven-jar-plugin</artifactId>
	    <version>2.4</version>
	    <configuration>
		<archive>
		    <manifest>
			<addClasspath>true</addClasspath>
			<classpathPrefix>/data/lib</classpathPrefix>
			<mainClass>com.zhang.spring.App</mainClass>
		    </manifest>
		</archive>
	    </configuration>
	</plugin>

 用于一键部署，把本地打包的jar文件，上传到远程服务器上，并执行服务器上的shell命令
	<plugin>
	    <groupId>org.codehaus.mojo</groupId>
	    <artifactId>wagon-maven-plugin</artifactId>
	    <version>1.0</version>
	    <configuration>
		<serverId>crawler</serverId>
		<fromDir>target</fromDir>
		<includes>*.jar,*.properties,*.sh</includes>
		<url>sftp://59.110.162.178/home/zhangxianhe</url>
		<commands>
		    <command>chmod 755 /home/zhangxianhe/update.sh</command>
		    <command>/home/zhangxianhe/update.sh</command>
		</commands>
		<displayCommandOutputs>true</displayCommandOutputs>
	    </configuration>
	</plugin>

 把多个jar包，打成1个jar包
	<plugin>
	    <groupId>org.apache.maven.plugins</groupId>
	    <artifactId>maven-shade-plugin</artifactId>
	    <version>2.4.3</version>
	    <executions>
		<execution>
		    <phase>package</phase>
		    <goals>
			<goal>shade</goal>
		    </goals>
		    <configuration>
			<transformers>
			    <transformer
				implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
				<manifestEntries>
				    <Main-Class>com.meiyou.topword.App</Main-Class>
				    <X-Compile-Source-JDK>${maven.compile.source}</X-Compile-Source-JDK>
				    <X-Compile-Target-JDK>${maven.compile.target}</X-Compile-Target-JDK>
				</manifestEntries>
			    </transformer>
			</transformers>
		    </configuration>
		</execution>
	    </executions>
	</plugin>

 自定义打包工具
	<plugin>
		<artifactId>maven-assembly-plugin</artifactId>
		<configuration>
			<descriptor>src/main/assembly/assembly.xml</descriptor>
		</configuration>
		<executions>
			<execution>
				<id>make-assembly</id>
				<phase>package</phase>
				<goals>
					<goal>single</goal>
				</goals>
			</execution>
		</executions>
	</plugin>

 测试运行器,test目标会自动执行测试源码路径（默认为src/test/Java/）下所有符合一组命名模式的测试类
	<plugin>
		<groupId>org.apache.maven.plugins</groupId>
		<artifactId>maven-surefire-plugin</artifactId>
		<version>2.10</version>
		<configuration>
			<skip>true</skip>
			<testFailureIgnore>true</testFailureIgnore>
		</configuration>
	</plugin>

2.Maven的scope
   compile：默认scope，在工程环境的classpath（编译环境）和打包（如果是WAR包，会包含在WAR包中）时候都有效。
   provided：容器或JDK已提供范围，表示该依赖包已经由目标容器（如tomcat）和JDK提供，只在编译的classpath中加载和使用，打包的时候不会包含在目标包中
   runtime：一般是运行和测试环境使用，编译时候不用加入classpath，打包时候会打包到目标包中。一般是通过动态加载或接口反射加载的情况比较多(容易JDBC)。
   test：测试范围，一般是单元测试场景使用，在编译环境加入classpath，但打包时不会加入，如junit等
   system：系统范围，与provided类似，只是标记为该scope的依赖包需要明确指定基于文件系统的jar包路径。因为需要通过systemPath指定本地jar文件路径，所以该scope是不推荐的。

