~~Shiro 常用功能
	Authentication：身份认证/登录，验证用户是不是拥有相应的身份；
	Authorization：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；
	Session Manager：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境的，也可以是如Web环境的；
	Cryptography：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；
	Web Support：Web支持，可以非常容易的集成到Web环境；
	Caching：缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率；
	Concurrency：shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；
	Testing：提供测试支持；
	Run As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；
	Remember Me：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。

~~Shiro的架构
	Subject：主体，可以看到主体可以是任何可以与应用交互的“用户”；
	SecurityManager：相当于SpringMVC中的DispatcherServlet或者Struts2中的FilterDispatcher；是Shiro的心脏；所有具体的交互都通过SecurityManager进行控制；它管理着所有Subject、且负责进行认证和授权、及会话、缓存的管理。
	Authenticator：认证器，负责主体认证的，这是一个扩展点，如果用户觉得Shiro默认的不好，可以自定义实现；其需要认证策略（Authentication Strategy），即什么情况下算用户认证通过了；
	Authrizer：授权器，或者访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；
	Realm：可以有1个或多个Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是JDBC实现，也可以是LDAP实现，或者内存实现等等；由用户提供；注意：Shiro不知道你的用户/权限存储在哪及以何种格式存储；所以我们一般在应用中都需要实现自己的Realm；
	SessionManager：如果写过Servlet就应该知道Session的概念，Session呢需要有人去管理它的生命周期，这个组件就是SessionManager；而Shiro并不仅仅可以用在Web环境，也可以用在如普通的JavaSE环境、EJB等环境；所有呢，Shiro就抽象了一个自己的Session来管理主体与应用之间交互的数据；这样的话，比如我们在Web环境用，刚开始是一台Web服务器；接着又上了台EJB服务器；这时想把两台服务器的会话数据放到一个地方，这个时候就可以实现自己的分布式会话（如把数据放到Memcached服务器）；
	SessionDAO：DAO大家都用过，数据访问对象，用于会话的CRUD，比如我们想把Session保存到数据库，那么可以实现自己的SessionDAO，通过如JDBC写到数据库；比如想把Session放到Memcached中，可以实现自己的Memcached SessionDAO；另外SessionDAO中可以使用Cache进行缓存，以提高性能；
	CacheManager：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少去改变，放到缓存中后可以提高访问的性能
	Cryptography：密码模块，Shiro提高了一些常见的加密组件用于如密码加密/解密的。


~~filterChainDefinitions 默认类型
anon: 例子/admins/**=anon 没有参数，表示可以匿名使用。  
authc: 例如/admins/user/**=authc表示需要认证(登录)才能使用，没有参数  
roles：例子/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，  
                    并且参数之间用逗号分割，当有多个参数时，例如admins/user/**=roles["admin,guest"],  
                    每个参数通过才算通过，相当于hasAllRoles()方法。  
perms：例子/admins/user/**=perms[user:add:*],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，  
             例如/admins/user/**=perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过，  
             想当于isPermitedAll()方法。  
rest：例子/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user:method] ,  
                   其中method为post，get，delete等。  
port：  例子/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,  
                   其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString是你访问的url里的？后面的参数。  
authcBasic：例如/admins/user/**=authcBasic没有参数表示httpBasic认证  
ssl:  例子/admins/user/**=ssl没有参数，表示安全的url请求，协议为https  
user: 例如/admins/user/**=user没有参数表示必须存在用户，当登入操作时不做检查  

注：anon，authcBasic，auchc，user是认证过滤器，  
    perms，roles，ssl，rest，port是授权过滤器