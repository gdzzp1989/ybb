~~@SpringBootApplication：组合注解，开启Spring的组件扫描和Spring Boot的自动配置功能
   @Target(ElementType.TYPE)
   @Retention(RetentionPolicy.RUNTIME)
   @Documented
   @Inherited
   @SpringBootConfiguration
   @EnableAutoConfiguration------自动配置的原理
   @ComponentScan(excludeFilters = {
        @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),
        @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })
    public @interface SpringBootApplication {
      ....
    }


~~@EnableAutoConfiguration------自动配置的原理
   @Target(ElementType.TYPE)
   @Retention(RetentionPolicy.RUNTIME)
   @Documented
   @Inherited
   @AutoConfigurationPackage
   @Import(AutoConfigurationImportSelector.class)
   public @interface EnableAutoConfiguration {
       String ENABLED_OVERRIDE_PROPERTY = "spring.boot.enableautoconfiguration";
       Class<?>[] exclude() default {};
       String[] excludeName() default {};
   }


~~@RestController: 用在类上 @ResponseBody和@Controller的组合注解

~~@PostMapping和@GetMapping:组合注解,@RequestMapping的post和get方式的缩写

~~AspectJ切面注解的五种通知注解
   @Before: 前置通知, 在方法执行之前执行
   @After: 后置通知, 在方法执行之后执行 。
   @AfterRunning: 返回通知, 在方法返回结果之后执行
   @AfterThrowing: 异常通知, 在方法抛出异常之后
   @Around: 环绕通知, 围绕着方法执行

~~lombok插件注解
    @Data
    @NoArgsConstructor
    @AllArgsConstructor

~~@Value("${xxx.xx.xx}"):用于属性上，读取配置文件

~~@ConfigurationProperties:用于类上，读取配置

~~@Bean:用于方法，产生一个Bean对象，然后这个Bean对象交给Spring管理。产生这个Bean对象的方法Spring只会调用一次，随后这个Spring将会将这个Bean对象放在自己的IOC容器中

~~Swagger2 配置，方法上@ApiOperation

~~@Mapper：映射Mybatis的mapper

~~@Transactional：开启事务，isolation属性设置隔离级别，propagation 属性设置传播行为

~~@ConfigurationProperties(prefix="XXX"):可以替代@value，自动注入配置文件的属性


~~启动Spring Boot的三种方式
   1.运行main函数的类启动
   2.用maven的spring-boot插件，mvn spring-boot:run命令
   3.mvn install将应用打包成jar，再通过java -jar xxx.jar来启动

~~Spring Boot属性加载顺序
   1.命令行传入的参数
   2.SPRING_APPLICATION_JSON中的属性（以JSON格式在系统环境变量的内容）
   3.java:comp/env中的JNDI属性
   4.hava的系统属性
   5.操作系统的环境变量
   6.同归random.*配置的随机属性
   7.位于jar包之外的application配置属性
   8.位于jar包之内的application配置属性
   9.使用Configuration注解的配置类
   10.应用默认属性，使用SpringApplication.setDefaultProperties定义的内容

~~Spring Boot Actuator(支持对默认EndPoint改造(比如继承HealthIndicator实现类)，也支持自定义EndPoint)
	autoconfig	显示一个auto-configuration的报告，该报告展示所有auto-configuration候选者及它们被应用或未被应用的原因	true
	beans	显示一个应用中所有Spring Beans的完整列表	true
	configprops	显示一个所有@ConfigurationProperties的整理列表	
	dump	执行一个线程转储	true
	env	暴露来自Spring　ConfigurableEnvironment的属性	true
	health	展示应用的健康信息（当使用一个未认证连接访问时显示一个简单的’status’，使用认证连接访问则显示全部信息详情）	false
	info	显示任意的应用信息	false
	metrics	展示当前应用的’指标’信息	true
	mappings	显示一个所有@RequestMapping路径的整理列表	true
	shutdown	允许应用以优雅的方式关闭（默认情况下不启用）	true
	trace	显示trace信息（默认为最新的一些HTTP请求）	true

~~Spring Profile:不同环境加载不同的配置

~~使用Flyway来管理数据库版本

~~使用LDAP来统一管理用户信息

~~分布式事务：JTA 
              LCN

~~Spring Boot 采用SockJs+STOMP实现消息通信（广播，点对点）

~~Spring Boot 监听设置和几个监听器的执行顺序 2.1.2

~~Spring Boot启动方法：SpringApplication.run()
                         1.初始化SpringApplication：构造方法中调用initialize(),
			    SpringfactoriesLoader从spring.factories中加载ApplicationContextInitializer和ApplicationListener两个接口的实现类
			    ApplicationContextInitializer：在refesh之前可以对ApplicationContext设置
			    ApplicationListener：Spring监听机制
			 2.run方法
			     启动监听
			     创建运行环境
			     创建不同的ApplicationContext
			     初始化ApplicationContext
			     调用ApplicationContext.refesh():这个方法会解析各种注解（通过BeanPostProcesser），扫描到@import，就会触发AutoConfigurationImportSelector的方法

~~Spring Boot可以基于jar包运行：java -jar xx.jar --server.port=8080

~~Spring Boot 运行原理：SpringfactoriesLoader使用类加载器加载spring.factories文件，得到一组@Configuration的
                       （在spring-boot-autoconfig.jar包有spring.factories文件，里面写了使用@Conditional和@Configuration注解的配置类的路径），
			再由AutoConfigurationImportSelector（@EnableAutoConfiguration注解@Import的类）将所有符合条件的@Configuration加载到容器中


~~Spring Boot四大核心
1.自动配置
2.起步依赖:告诉Spring Boot需要什么功能，它就能引入需要的库。
3.Spring Boot CLI：命令行界面
4.Actuator
   